package arye; 

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;
/**
 * This program reads csv files in a given directory and builds a CSV file with with the
 * most up to 10 WiFi strongest available points in the following format:
 *   Time, ID, Latitude, Longitude, Altitude, #Wifi_network, SSID1, MAC1, Frequency1, Signal1, ...
 *       
 * @author arye gross and avi wasserberger
 * @version 31/10/17
 */
public class ex0 {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Scanner console = new Scanner(System.in);
		//toCsv(console.next());
		toCsv("C:\\Download\\arye");
		//console.close();
	}
	/**
	 * Gets path of folder. 
	 * Print a file name wifi.csv to the given path, with the information 
	 * collected in this application
	 * 
	 * @param path-
	 */
	public static void toCsv(String path){
		FileWriter fw;             // statement
		try {                 //   try write the file 
			fw = new FileWriter(path+"\\wifi.csv");
			PrintWriter outs = new PrintWriter(fw);
			String[] pathes=whichFiles(path);
			String[][] wifiInfo=collectInfo(pathes);
			printFile(wifiInfo,outs);
			fw.close();      // close fw writer
			outs.close();     //close outs writer
		} catch (IOException e) {     // exception
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


	}
	/**
	 * Gets path of folder.
	 * Returns array of path names of relevant files in the folder.
	 * @param path- A path name
	 * @return array of path names to the relevant files.   
	 */
	private static String[] whichFiles(String path){
		File folder = new File(path);
		File[] listOfFiles = folder.listFiles();
		String[] pathes=new String[listOfFiles.length];
		int counter=0;
		for (int i=0;i<listOfFiles.length;i++) {
			File file=listOfFiles[i];
			if (file.getName().endsWith(".csv")&&file.isFile()&&!file.getName().equals("wifi.csv")) {
				pathes[counter] = file.getPath();
				counter++;   // another relevant file 
			}
		}
		String[] finalPathes=new String[counter];
		for(int i=0;i<counter;i++){
			finalPathes[i]=pathes[i];
		}
		return finalPathes;
	}
	/** 
	 *  gets array[][] of the info and PrintWriter to wifi.csv (format)
	 *  printing into the new csv file all the data
	 * 
	 * @param info-
	 * @param outs-
	 */
	private static void printFile(String[][] info,PrintWriter outs){
		outs.print("Time, ID, Lat, Lon, Alt, #WiFi networks (up to 10), SSID1, MAC1, Frequncy1, Signal1,SSID2, MAC2, Frequncy2, Signal2, SSID3, MAC3, Frequncy3, Signal3,SSID4, MAC4, Frequncy4, Signal4, SSID5, MAC5, Frequncy5, Signal5,SSID6, MAC6, Frequncy6, Signal6, SSID7, MAC7, Frequncy7, Signal7,SSID8, MAC8, Frequncy8, Signal8, SSID9, MAC9, Frequncy9, Signal9,SSID10, MAC10, Frequncy10, Signal10");
		int[] num_of_lines=get_num_of_lines(info);
		leaveJustTen(num_of_lines,info);      // this method gets the matrix and give just the 10 power
		int lineNum=0;
		int numOfWifi;
		for(int i=0;i<info[0].length;i++){
			if(num_of_lines[i]>lineNum){
				outs.println();
				lineNum++;
				numOfWifi=0;
				for(int temp=i;temp<num_of_lines.length&&num_of_lines[temp]<=lineNum;temp++){
					if(num_of_lines[temp]!=0){
						numOfWifi++;
					}
				}
				outs.print(info[2][i]+","+info[9][i]+","+info[5][i]+","+info[6][i]+","+info[7][i]+","+numOfWifi);
			}
			if(num_of_lines[i]!=0){
				outs.print(","+info[1][i]+","+info[0][i]+","+info[3][i]+","+info[4][i]);
			}
		}
	}
	/**
	 * gets array[][] of info and array num_of_lines that symbolize each line in the info in which line in the new file to print it
	 * changing the num_of_line array such that won't be more than ten wifi in line in the new file
	 * 
	 * @param num_of_lines
	 * @param info
	 * 
	 */
	private static void leaveJustTen(int[] num_of_lines, String[][] info) {
		int start=0;
		for(int end=1;end<num_of_lines.length;end++){
			if(num_of_lines[start]==num_of_lines[end]&&end-start>9){
				zeroMinimum(start,end,info, num_of_lines);
				while(num_of_lines[start]==0){
					start++;
				}
			}
			if(num_of_lines[start]!=num_of_lines[end]){
				start=end;
			}
		}

	}
	/**
	 *  gets start point and end point in the num_of_lines array 
	 *  make the one that his rxl the lowest-zero
	 * 
	 * @param start
	 * @param end
	 * @param info
	 * @param num_of_lines
	 */
	private static void zeroMinimum(int start, int end, String[][] info,int[] num_of_lines) {
		int lowest = Integer.parseInt(info[4][start]),place=start;
		for (int p = start; p < end; p++)
		{
			if (Integer.parseInt(info[4][p]) < lowest&&num_of_lines[p]!=0)
			{
				lowest = Integer.parseInt(info[4][p]);
				place = p;
			}
		}
		num_of_lines[place]=0;
	}
	/**
	 * Gets array[][] of info. 
	 * Return array num_of_lines that symbolize each line in the info in which line in the new file to print it (zero sybolize not to print)
	 * 
	 * @param info
	 * @return number of lines in matrix
	 * 
	 */
	private static int[] get_num_of_lines(String[][] info) {
		int[] num_of_lines=new int[info[0].length];
		int numOfCurrentLine=1;
		num_of_lines[0]=1;
		for(int i=1;i<info[0].length;i++){
			if(!info[8][i].equals("WIFI")){
				num_of_lines[i]=0;
				continue;
			}
			if(info[2][i].equals(info[2][i-1])&&info[5][i].equals(info[5][i-1])&&
					info[6][i].equals(info[6][i-1])&&info[7][i].equals(info[7][i-1])){
				num_of_lines[i]=numOfCurrentLine;
			}
			else{
				numOfCurrentLine++;
				num_of_lines[i]=numOfCurrentLine;
			}
		}
		return num_of_lines;
	}
	/**
	 * from https://stackoverflow.com/questions/453018/number-of-lines-in-a-file-in-java 
	 * Gets path of a file.  
	 * Return the number of lines in it.
	 * 
	 * @param filename
	 * @return 1 or number of lines
	 * @throws IOException
	 */
	private static int countLines(String filename) throws IOException {
		InputStream is = new BufferedInputStream(new FileInputStream(filename));
		try {                 // try
			byte[] c = new byte[1024];
			int count = 0;
			int readChars = 0;
			boolean empty = true;
			while ((readChars = is.read(c)) != -1) {
				empty = false;
				for (int i = 0; i < readChars; ++i) {
					if (c[i] == '\n') {
						++count;
					}
				}
			}
			return (count == 0 && !empty) ? 1 : count;
		} finally {
			is.close();

		}
	}
	/**
	 * Get an array of the relevant path names. 
	 * Return the relevant info from the files in String array[][], The order is:
	 * 0 MAC,1 SSID,2 Time,3 Channel,4 RSSI,5 Latitude,6 Longitude,7 Altitude,8 Type,9 ID
	 * @param pathes-
	 * @return info-matrix of parameters 
	 */
	private static String[][] collectInfo(String[] pathes){
		int sum_of_num_of_lines=0;
		int currentLine=0;
		int [] num_of_lines=new int[pathes.length];
		try {
			for(int i=0;i<pathes.length;i++){
				num_of_lines[i]=countLines(pathes[i])-2;
				sum_of_num_of_lines += num_of_lines[i];
			}
			String info[][]=new String[10][sum_of_num_of_lines];
			for(int i=0;i<pathes.length;i++){
				FileReader fr = new FileReader(pathes[i]);
				BufferedReader br = new BufferedReader(fr);
				Scanner scanner = new Scanner(br.readLine());
				Scanner sc=scanner.useDelimiter("\\s*,\\s*");
				sc.next();sc.next();sc.next();sc.next();sc.next();
				String display=sc.next();
				display=display.substring(display.lastIndexOf('=') + 1);
				br.readLine();
				for(int j=currentLine ; j<num_of_lines[i]+currentLine ; j++){
					scanner = new Scanner(br.readLine());
					sc=scanner.useDelimiter("\\s*,\\s*");
					info[0][j]=sc.next();
					info[1][j]=sc.next();
					sc.next();
					info[2][j]=sc.next();
					info[3][j]=sc.next();
					info[4][j]=sc.next();
					info[5][j]=sc.next();
					info[6][j]=sc.next();
					info[7][j]=sc.next();
					sc.next();
					info[8][j]=sc.next();
					info[9][j]=display;
				}
				currentLine+=num_of_lines[i];
				scanner.close();
				br.close();
			}
			return info;
		} catch (IOException e) {               // exception
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	/**prints the info array
	 * @param info-all parameters in one line
	 */
	private static void printInfo(String[][] info){
		for(int i=0;i<info[0].length;i++){
			System.out.print(info[0][i]+", ");
			System.out.print(info[1][i]+", ");
			System.out.print(info[2][i]+", ");
			System.out.print(info[3][i]+", ");
			System.out.print(info[4][i]+", ");
			System.out.print(info[5][i]+", ");
			System.out.print(info[6][i]+", ");
			System.out.print(info[7][i]+", ");
			System.out.print(info[8][i]+", ");
			System.out.println(info[9][i]+", ");
		}
	}
	/**
	 * Write the KML file 
	 * @param filePlace
	 */
	/**
	 * Write the KML file 
	 * @param filePlace
	 */
	public static void writeKml(String filePlace){
		try {
			FileWriter fw = new FileWriter(filePlace+"\\wifi.kml");
			PrintWriter outs = new PrintWriter(fw);
			outs.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			outs.println("<kml xmlns=\"http://www.opengis.net/kml/2.2\">");
			outs.println("<Document>");
			editPlacesToKml(outs,filePlace);
			//outs.println("</Folder>");
			outs.println("</Document></kml>");
			//outs.println("</kml>");
			outs.close();
			fw.close();
		}
		catch(IOException ex) {
			System.out.print("Error writing file\n" + ex);
		}
	}
	/**
	 * Write the KML file with the most strong wifi signals.
	 * @param outs-
	 * @param filePlace-
	 * @return 
	 */
	private static int editPlacesToKml(PrintWriter outs,String filePlace ){
		try {
			FileReader fr = new FileReader(filePlace+"\\wifi.csv");
			BufferedReader br = new BufferedReader(fr);
			String str;
			str = br.readLine();
			if (!str.equals("Time, ID, Lat, Lon, Alt, #WiFi networks (up to 10), SSID1, MAC1, Frequncy1, Signal1,SSID2, MAC2, Frequncy2, Signal2, SSID3, MAC3, Frequncy3, Signal3,SSID4, MAC4, Frequncy4, Signal4, SSID5, MAC5, Frequncy5, Signal5,SSID6, MAC6, Frequncy6, Signal6, SSID7, MAC7, Frequncy7, Signal7,SSID8, MAC8, Frequncy8, Signal8, SSID9, MAC9, Frequncy9, Signal9,SSID10, MAC10, Frequncy10, Signal10" )){
				return 0;//fail
			}
			for (int i=1;i<countLines(filePlace+"\\wifi.csv");i++){
				try {
					String[] parts = br.readLine().split(",");
					outs.println("<Placemark>");
					outs.print("  <name>");
					outs.print("Time: "+parts[0]+"ID: "+parts[1]);
					outs.println("</name>");
					outs.print("  <description><![CDATA[");
					for(int j=6,counter=1;j<Integer.parseInt(parts[5])*4+6;j+=4,counter++){
						outs.print(" <br/>"+counter+": <br/>SSID: <b>"+parts[j]+"  <br/>MAC: <b>"+parts[j+1]+"  <br/>Freqency: <b>"+parts[j+2]+"  <br/>Channel: <b>"+parts[j+3]);

					}
					outs.println("]]></description><styleUrl>#red</styleUrl>");
					outs.println("  <Point>");
					outs.print("    <coordinates>");
					outs.print(parts[3]+","+parts[2]);
					outs.println("</coordinates>");
					outs.println("  </Point>");
					outs.println("</Placemark>");
				}
				catch(IOException ex) {                   // exception
					return (1);//success, no more lines
				}


			}
			br.close();
			fr.close();
			return 1;
		}
		catch(IOException ex) {                            // exception
			System.out.print("Error reading file\n" + ex);
			System.exit(2);
			return 0;
		}
	}

	//	public static String[][] filter(String s) {
	//		int j=0;
	//		String info[][]=new String[10][sum_of_num_of_lines];
	//		while (condition) {
	//			String[] parts = br.readLine().split(",");
	//			for (int i = 0; i < parts.length; i++) {
	//				info[i][j]=parts[i];
	//			}
	//			j++;
	//		}

	public static String[][] Q3 (String path){
		try {
			String[][] mat = csvToMat(path);

			for (String[] strings : mat) {
				System.out.println(Arrays.toString(strings));
			}

			boolean isByLocation, isByTime, isByID;

			boolean[] filtered = new boolean[countLines(path)];



			double temp;
			Scanner s = new Scanner(System.in);
			System.out.println("press 1 if you want to filter by location");
			int w = s.nextInt();
			isByLocation = (w==1);
			if(isByLocation){          // don't working.
				System.out.println("enter lat and lon of one point of location(enter lat ,press space and enter the lon)");
				double lat1=s.nextDouble();
				double lon1=s.nextDouble();
				System.out.println("enter lat and lon of other point of location(enter lat ,press space and enter the lon)");
				double lat2=s.nextDouble();
				double lon2=s.nextDouble();
				if(lat1>lat2){
					temp=lat2;
					lat2=lat1;
					lat1=temp;
				}
				if(lon1>lon2){
					temp=lon2;
					lon2=lon1;
					lon1=temp;
				}
				int LATIndex = 0;
				for (int i = 0; i < mat[0].length; i++) {///////////////////////////////////////////////////////////
					if(mat[i][0].equals("Latitude")){
						LATIndex = i;
						break;
					}
				}
				int LONIndex = 0;
				for (int i = 0; i < mat[0].length; i++) {///////////////////////////////////////////////////////////
					if(mat[i][0].equals("Longitude")){
						LONIndex = i;
						break;
					}
				}
				for (int i = 1; i < mat.length; i++) {
					if(Integer.parseInt(mat[i][LATIndex])>lat1&&Integer.parseInt(mat[i][LATIndex])<lat2&&Integer.parseInt(mat[i][LONIndex])>lon1&&Integer.parseInt(mat[i][LONIndex])<lat2)
						filtered[i]=true;
					else
						filtered[i]=false;
						
				}


			}
			else{  // i'm don't understand the format.
				System.out.println("press 1 if you want to filter by time");
				w = s.nextInt();
				isByTime = (w==1);
				if(isByTime){
					



				}
				else{

					System.out.println("press 1 if you want to filter by ID");
					w = s.nextInt();
					isByID = (w==1);

					if(isByID){
						System.out.println("Enter the ID: ");
						String id = s.nextLine();
						int IdIndex = 0;
						for (int i = 0; i < mat[0].length; i++) {///////////////////////////////////////////////////////////
							if(mat[0][i].equals("ID")){
								IdIndex = i;
								break;
							}
						}

						for (int i = 1; i < mat.length; i++) {
							if(mat[i][IdIndex].equals(id)){

							}
						}


					}

				}
			}
			s.close();

			return null;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;

	}

	public static  String[][] csvToMat(String path){
		String csvFile = "C:/Users/Dell/Desktop/aaa/wifi.csv";
		BufferedReader br = null;
		String line = "";
		String cvsSplitBy = ",";
		String[][] mat;
		//System.out.println("jkghjgjhgjhghj");
		try {


			br = new BufferedReader(new FileReader(csvFile));
			line = br.readLine();


			//ArrayList<String[]> a = new ArrayList<>();
			String[] row = line.split(cvsSplitBy);
			mat = new String[countLines("C:/Users/Dell/Desktop/aaa/wifi.csv")][64];
			System.out.println(row.length);
			for (int i = 0; i < row.length; i++) {

				mat[0][i] = row[i];
			}
			int k = 1;
			while ((line = br.readLine()) != null && k<500) {
				// use comma as separator
				row = line.split(cvsSplitBy);

				for (int i = 0; i < row.length; i++) {

					mat[k][i] = row[i];
				}
				k++;
			}
			for (String[] r : mat) {
				System.out.println(Arrays.toString(r));
			}
			return mat;

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return null;
	}
}
